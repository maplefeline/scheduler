"""
Django settings for scheduler project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from base64 import b64decode
from json import loads
from os import environ
from pathlib import Path
from typing import List

import dj_database_url  # type: ignore

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = b64decode(
    environ.get(
        "SCHEDULER_SECRET_KEY",
        "ZmFiZCs0JTVkMTZwdzNwZUBiKCQyI3B5diFjY2o9OTEtMHpsdnQhX2UldWJyZGNkMnc=",
    )
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = loads(environ.get("DEBUG", "true"))

ALLOWED_HOSTS = loads(environ.get("SCHEDULER_ALLOWED_HOSTS", "[]"))

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "reminders.apps.RemindersConfig",
    "static_support.apps.StaticSupportConfig",
]
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
ROOT_URLCONF = "scheduler.urls"
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
WSGI_APPLICATION = "scheduler.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}
# Support all Heroku databases.
for (env, url) in environ.items():  # pragma: no cover
    if env.startswith("HEROKU_POSTGRESQL_"):
        db_color = env.split("_")[2].lower()
        DATABASES[db_color] = dj_database_url.parse(url)
        DATABASES[db_color].update(
            {
                "ENGINE": "django.db.backends.postgresql",
            }
        )
if "DATABASE_URL" in environ:  # pragma: no cover
    DATABASES["default"] = dj_database_url.config()
    DATABASES["default"].update(
        {
            "ENGINE": "django.db.backends.postgresql",
        }
    )

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS: List[object] = []

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
STATIC_ROOT = BASE_DIR / "staticfiles"
STATIC_URL = "/static/"

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
